import{_ as n,c as a,a0 as l,o as p}from"./chunks/framework.D62TWaax.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"web/TS教程/index.md","filePath":"web/TS教程/index.md","lastUpdated":1732672553000}'),e={name:"web/TS教程/index.md"};function o(r,s,t,c,B,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h2 id="ts-入门到精通" tabindex="-1">TS 入门到精通 <a class="header-anchor" href="#ts-入门到精通" aria-label="Permalink to &quot;TS 入门到精通&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">温馨提示</p><p>本教程来源自己总结+网上收集<br> 目的为了大家更方便,更直观的理解其中的意思</p></div><hr><details class="details custom-block"><summary>索引类型 keyof</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> KeyCls</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> KeyClsExample1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> KeyCls</span><span style="color:#7F848E;font-style:italic;"> // name | age</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getParams</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">params</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">keyof</span><span style="color:#E5C07B;"> KeyCls</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">getParams</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 正常</span></span>
<span class="line"><span style="color:#61AFEF;">getParams</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;age&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 正常</span></span>
<span class="line"><span style="color:#61AFEF;">getParams</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;sex&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></details><hr><details class="details custom-block"><summary>in</summary><p>in 可以遍历枚举类型</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Keys</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;a&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;b&#39;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#E5C07B;">p</span><span style="color:#C678DD;"> in</span><span style="color:#E5C07B;"> Keys</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type Obj = {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     a: any;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     b: any;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></details><hr><details class="details custom-block"><summary>extends</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> TExtends</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> U</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> number</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> never</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> TExtendExample</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> TExtends</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#7F848E;font-style:italic;">// number</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 联合类型, 表示如果T中的类型是U的子集, 那么返回never, 否则返回T, 这个过程可以理解为对T中的类型进行一次遍历, 每个类型都执行一次extends</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> NonNullable1</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> U</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> never</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> T</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> NonExample</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> NonNullable1</span><span style="color:#ABB2BF;">&lt;null | </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, null | undefined&gt; </span><span style="color:#7F848E;font-style:italic;">// string</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></details><details class="details custom-block"><summary>Pick</summary><p>Pick 英文意思挑选, 也就是从某种类型中挑选出一个或多个属性</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Todo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  title</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">  desc</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">  Done</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> TodoPreview</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Pick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;Done&#39;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type TodoPreview = {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     Done: boolean;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实现</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> MyPick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> extends</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#E5C07B;"> K</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// K in extends keyof T = keyof T, 意思是取值必须是在T的key上面取, 如果不传递取值默认为keyof T,所有的key, 内部取值是如果传递了K, 则属性就在K中任意一个</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></details><hr><details class="details custom-block"><summary>Readonly</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Todo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  title</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">  desc</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">  Done</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> todo</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Pick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Readonly</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;">&gt;, </span><span style="color:#98C379;">&#39;title&#39;</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;你好&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">todo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;啊啊啊&#39;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 无法为“title”赋值，因为它是只读属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实现</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> myReadonly</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  readonly</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 分析: 通过keyof拿到所有的key属性值组成联合类型, 然后通过in遍历类型,在属性值前面加上readonly, 值value则是 T[K]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过上面案例还可以实现可选类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> myOptional</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></details><hr><details class="details custom-block"><summary>Exclude</summary><ul><li>语法: Exclude&lt;T, U&gt;, 返回 T 中不存在于 U 的部分</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> myExclude</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> U</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> never</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> T</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 测试</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> excludeExample</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> myExclude</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#7F848E;font-style:italic;">// &#39;b&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 分析: 对T也就是&#39;a&#39;|&#39;b&#39;遍历, a extends &#39;a&#39;|&#39;b&#39;, 返回never, &#39;b&#39;, &#39;a&#39;|&#39;b&#39;,返回&#39;b&#39;, 所以上面的返回&#39;b&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></details><hr><details class="details custom-block"><summary>infer</summary><p>infer 可以推荐一个类型变量, 相当于声明一个类型变量, 这个变量的类型取决于传入的泛型 T</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Flatten</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">&lt;infer </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> U</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> flattenExample1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Flatten</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#7F848E;font-style:italic;">// string</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> flattenExample2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Flatten</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[]&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Fn</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> infer </span><span style="color:#E5C07B;">R</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> R</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> TFuncExample1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Fn</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#7F848E;font-style:italic;">// string</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> TFuncExample2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Fn</span><span style="color:#ABB2BF;">&lt;() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> boolean</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#7F848E;font-style:italic;">// boolean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> TObj</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: infer </span><span style="color:#E5C07B;">VType</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: infer </span><span style="color:#E5C07B;">UType</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> VType</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">UType</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> TObjExample</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> TObj</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#7F848E;font-style:italic;">// string</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> TObjExample2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> TObj</span><span style="color:#ABB2BF;">&lt;{</span></span>
<span class="line"><span style="color:#E06C75;">  a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#E06C75;">  b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type TObjExample2 = string | number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> vb</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> TObjExample3</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> TObj</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> vb</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type TObjExample3 = () =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     a: number;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     b: boolean;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div></details><hr><details class="details custom-block"><summary>ReturnType&lt;T&gt;</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> ReturnType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">[]</span></span>
<span class="line"><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> infer </span><span style="color:#E5C07B;">R</span></span>
<span class="line"><span style="color:#C678DD;">  ?</span><span style="color:#E5C07B;"> R</span></span>
<span class="line"><span style="color:#C678DD;">  :</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// infer R 就是生命一个变量来承载传入函数签名的返回值类型,简单说就是用它取到函数返回值的类型方便之后使用.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">fill</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> fn2Type2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> myReturnType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> foo</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#7F848E;font-style:italic;">// number[]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></details><hr><details class="details custom-block"><summary>Partial</summary><p>将传入的属性变为可选项</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Todo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  title</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">  desc</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">  Done</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> KeyCls</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Partial</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> KeyOfExample1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Partial</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> KeyOfExample2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Partial</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">KeyCls</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> keyofEx1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">KeyOfExample1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;1&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></details><hr><details class="details custom-block"><summary>-? +?</summary><p>-? 将可选项代表的 ?去掉, 将该类型变成必选项, 与之对应的还有一个+?,是将可选项变成必选项</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Todo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  title</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">  desc</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">  Done</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Mutable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  -</span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> mutableExample</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Mutable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Readonly</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将Todo变成可读之后再变成可写</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></details><hr><details class="details custom-block"><summary>Required</summary><p>Required 的作用是将传入的属性变成必选项</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Required</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]-</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></details><hr><details class="details custom-block"><summary>Record</summary><p>作用: 将 K 中所有的属性的值转化为 T 类型</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> myRecord</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> extends</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#E5C07B;"> K</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">T</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Methods</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  GET</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;get&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  POST</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;post&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  DELETE</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;delete&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  PUT</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;put&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> IRouter</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> myRecord</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Methods</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type IRouter = {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     get: (req: any, res: any) =&gt; void;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     post: (req: any, res: any) =&gt; void;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     delete: (req: any, res: any) =&gt; void;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     put: (req: any, res: any) =&gt; void;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></details><hr><details class="details custom-block"><summary>Omit</summary><p>作用: 排除某个某些字段</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Todo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  title</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">  desc</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">  Done</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 上面学习了Pick, 这个意思和Pick相反, 可以使用Pick+Exclude实现</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Exclude&lt;T, U&gt;, 返回T中不存在于U的部分</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Pick&lt;T, K&gt;, 从T中挑出K</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> P</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Exclude</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> P1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> P</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;title&#39;</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#7F848E;font-style:italic;">// &#39;desc&#39; | &#39;Done&#39;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> myOmit</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> extends</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Pick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> omitExample</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> myOmit</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;title&#39;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type omitExample = {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     desc: string;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     Done: boolean;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></details><details class="details custom-block"><summary>NonNullable</summary><p>NonNullable&lt;T&gt;：作用是去掉 T 中的 null 和 undefined。T 为字面量/具体类型的联合类型，如果是对象类型是没有效果的。如下</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 4.8版本之前</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> NonNullable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> null | undefined </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> never</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 4.8版本</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> NonNullable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;"> &amp; {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></details><details class="details custom-block"><summary>Awaited</summary><p>Awaited&lt;T&gt;：作用是获取 async/await 函数或 promise 的 then() 方法的返回值的类型。而且自带递归效果，如果是这样嵌套的异步方法，也能拿到最终的返回值类型</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> N1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Awaited</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> N2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Awaited</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;&gt;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 联合类型, 会出发分发</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> N3</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Awaited</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 源码定义</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Awaited</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> null | undefined</span></span>
<span class="line"><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> T</span></span>
<span class="line"><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> object &amp; { </span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">onfulfilled</span><span style="color:#ABB2BF;">: infer </span><span style="color:#E5C07B;">F</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#C678DD;">  ?</span><span style="color:#E5C07B;"> F</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: infer </span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> any</span></span>
<span class="line"><span style="color:#C678DD;">    ?</span><span style="color:#E5C07B;"> Awaited</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    :</span><span style="color:#E5C07B;">never</span></span>
<span class="line"><span style="color:#C678DD;">  :</span><span style="color:#E5C07B;"> T</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></details><details class="details custom-block"><summary>Parameters</summary><p>Parameters&lt;T&gt;：作用是获取函数所有参数的类型集合，返回的是元组。T 自然就是函数了</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> T1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Parameters</span><span style="color:#ABB2BF;">&lt;() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#7F848E;font-style:italic;">// []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> T2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Parameters</span><span style="color:#ABB2BF;">&lt;(</span><span style="color:#E06C75;font-style:italic;">s</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#7F848E;font-style:italic;">// [s: string]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 泛型参数的函数</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> T3</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Parameters</span><span style="color:#ABB2BF;">&lt;&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#7F848E;font-style:italic;">// [arg: unknown]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 下面这样传参是会报错的</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> T7</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Parameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> T8</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Parameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></details><hr><details class="details custom-block"><summary>练习题</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 给定一个多层级的对象, 将所有属性改为可选属性</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> User</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#E06C75;">    children</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        boy</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#E06C75;">        girl</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 思路: 我们都知道 Partial可以改变第一层, 也就等于说是需要使用Partial进行递归遍历</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Partial</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { [</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">] }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 递归Partial</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> DeepOptional</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> object </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> { [</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">DeepOptional</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">]&gt; } </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> T</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 递归Required</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> DeepRequired</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> object </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> { [</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]-</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">DeepRequired</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">]&gt; } </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> T</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 递归Readonly</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> DeepReadonly</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> object </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">DeepReadonly</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">]&gt; } </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> T</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 需要把如下类型变成 { name: string }</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> User</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">: null,</span></span>
<span class="line"><span style="color:#E06C75;">    gender</span><span style="color:#ABB2BF;">: undefined</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实现如下</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> objNonNullable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { [</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> null | undefined </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> never</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> P</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></details>`,32)]))}const C=n(e,[["render",o]]);export{b as __pageData,C as default};
