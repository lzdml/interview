import{_ as a,c as l,a0 as n,o as e}from"./chunks/framework.BDOpb1iH.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"computer/index.md","filePath":"computer/index.md","lastUpdated":1733362906000}'),p={name:"computer/index.md"};function o(c,s,r,i,t,h){return e(),l("div",null,s[0]||(s[0]=[n(`<h3 id="zsh" tabindex="-1">zsh <a class="header-anchor" href="#zsh" aria-label="Permalink to &quot;zsh&quot;">​</a></h3><ul><li>使用场景</li></ul><div class="danger custom-block"><p class="custom-block-title">.zshenv</p><p>.zshenv 中存放的<strong>环境变量</strong>配置项在任何场景下都能被读取, 这里通常把 「$PATH」、「$HOME」、「$USER」等配置项放在这里, 这样无论是在交互 shell, 或者运行程序都会读取此文件</p></div><div class="danger custom-block"><p class="custom-block-title">.zshrc</p><p>.zshrc 主要用在交互 shell 中, 它会在每次打开交互 shell 时被读取, 在电脑每次自启时都会生效（永久有效）这里可以配置一些默认的命令, 比如「alias」、「bindkey」等等</p></div><div class="danger custom-block"><p class="custom-block-title">.bash_profile</p><p>.bash_profile.bash_profile中修改的环境变量只对当前窗口有效，修改完.bash_profile之后记得在终端输入source ~/.bash_profile使之生效。</p></div><div class="danger custom-block"><p class="custom-block-title">.zlogin</p><p>.zlogin 是在 login shell 的时候读取, 比如系统启动的时候会读取此文件</p></div><div class="danger custom-block"><p class="custom-block-title">.zprofile</p><p>.zprofile 是.zlogin 的替代品, 如果使用了.zlogin 就不必关心此文件</p></div><p>读取顺序</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>.zshenv → [.zprofile if login] → [.zshrc if interactive] → [.zlogin if login] → [.zlogout sometimes]</p></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">a.</span><span style="color:#98C379;"> /etc/profile</span></span>
<span class="line"><span style="color:#61AFEF;">b.</span><span style="color:#98C379;"> /etc/paths</span></span>
<span class="line"><span style="color:#61AFEF;">c.</span><span style="color:#98C379;"> ~/.bash_profile</span></span>
<span class="line"><span style="color:#61AFEF;">d.</span><span style="color:#98C379;"> ~/.bash_login</span></span>
<span class="line"><span style="color:#61AFEF;">e.</span><span style="color:#98C379;"> ~/.profile</span></span>
<span class="line"><span style="color:#61AFEF;">f.</span><span style="color:#98C379;"> ~/.bashrc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>a 和 b 都是系统级别的, 系统启动就会加载, 其他的都是用户级别的</li><li>c,d,e 按照从前往后的顺序读取, 如果 c 文件存在, 则后面的几个文件就会被忽略不读了,</li><li>f, 没有上述规则, 它是 bash shell 打开的时候载入的</li></ul><p>一般配置到全局变量的文件都是属于应用程序, 不过如果配置到了 bashrc 里,再要用 ide 的 terminal 去运行它，理论上是跑不起来的，还是按照大多数人的走法去配置到~/.bash_profile 里的好。</p><h3 id="mac-终端的-zsh-和-base-的区别" tabindex="-1">Mac 终端的 zsh 和 base 的区别 <a class="header-anchor" href="#mac-终端的-zsh-和-base-的区别" aria-label="Permalink to &quot;Mac 终端的 zsh 和 base 的区别&quot;">​</a></h3><ol><li>从 macOS Catalina 版开始，zsh (Z shell) 是所有新建用户帐户的默认 Shell。 bash 是 macOS Mojave 及更低版本中的默认 Shell。</li><li>zsh 基本上兼容 bash。</li></ol><p>如果您正在使用 bash 描述文件（例如，为了设置环境变量、别名或路径变量），则您应改为使用作用与它相同的 zsh 描述文件。例如： .zprofile 的作用与 .bash_profile 相同，并且在登录时运行（包括通过 SSH 运行）； .zshrc 的作用与 .bashrc 相同，并针对每个新的“终端”会话运行；</p><h3 id="操作步骤" tabindex="-1">操作步骤 <a class="header-anchor" href="#操作步骤" aria-label="Permalink to &quot;操作步骤&quot;">​</a></h3><ul><li>查看 shell 类型</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> echo</span><span style="color:#E06C75;"> $SHELL</span></span>
<span class="line"><span style="color:#61AFEF;">如果是</span><span style="color:#98C379;"> 「/bin/zsh」就是zsh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="zsh-和-bash-的区别" tabindex="-1">zsh 和 bash 的区别 <a class="header-anchor" href="#zsh-和-bash-的区别" aria-label="Permalink to &quot;zsh 和 bash 的区别&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>bash script 更加接近 posix 标准，zsh 则更加“灵活”<br> bash 基本上上手即用，zsh 则需要繁杂的配置（但我们有神一样的 oh-my-zsh）<br> 二者的命令提示符不同，zsh 的命令提示符可定制性更高<br> zsh 的自动补全功能更加强大<br> zsh 的拼写检查功能更强</p><p>从一个交互式终端的角度来讲，zsh 更为强大，但是作为脚本解释器，bash 更加符合 posix 标准，因此，建议读者日常使用 zsh（配合 oh-my-zsh），但是使用 bash 做脚本解释器。</p></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">切换bash</span><span style="color:#98C379;"> chsh</span><span style="color:#D19A66;"> -s</span><span style="color:#98C379;"> /bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;">切换zsh</span><span style="color:#98C379;"> chsh</span><span style="color:#D19A66;"> -s</span><span style="color:#98C379;"> /bin/zsh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">在配置文件方面:</span></span>
<span class="line"><span style="color:#61AFEF;">bash读取的配置文件是</span><span style="color:#98C379;"> ~/.bash_profile</span></span>
<span class="line"><span style="color:#61AFEF;">zsh读取的配置文件是</span><span style="color:#98C379;"> ~/.zshrc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">当从bash切换为zsh时，如果不想重新配置一遍.zshrc文件，可以__在.zshrc文件中加上source</span><span style="color:#98C379;"> ~/.bash_profile，从而直接从.bash_profile文件读取配置。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,21)]))}const u=a(p,[["render",o]]);export{d as __pageData,u as default};
