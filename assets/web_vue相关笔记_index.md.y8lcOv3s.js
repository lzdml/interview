import{_ as l,c as p,a0 as n,G as o,B as e,o as t}from"./chunks/framework.BDOpb1iH.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"web/vue相关笔记/index.md","filePath":"web/vue相关笔记/index.md","lastUpdated":1733362906000}'),r={name:"web/vue相关笔记/index.md"};function c(i,s,B,y,F,b){const a=e("js-test");return t(),p("div",null,[s[0]||(s[0]=n(`<h2 id="vue-源码工具函数" tabindex="-1">vue 源码工具函数 <a class="header-anchor" href="#vue-源码工具函数" aria-label="Permalink to &quot;vue 源码工具函数&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> __DEV__</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;production&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="空对象" tabindex="-1">空对象 <a class="header-anchor" href="#空对象" aria-label="Permalink to &quot;空对象&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> EMPTY_OBJ</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> __DEV__</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">freeze</span><span style="color:#ABB2BF;">({}) </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Object.freeze()可以冻结一个对象, 一个被冻结的对象再也不能被修改;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 冻结了一个对象则不能向这个对象添加新的属性, 不能删除已有的属性,不能修改</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 此外，冻结一个对象后该对象的原型也不能被修改。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  prop</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">42</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">freeze</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prop</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 33</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 42</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// -------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> EMPTY_OBJ1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">freeze</span><span style="color:#ABB2BF;">({});</span></span>
<span class="line"><span style="color:#E5C07B;">EMPTY_OBJ1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;DZL&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">EMPTY_OBJ1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="noop-空函数" tabindex="-1">NOOP 空函数 <a class="header-anchor" href="#noop-空函数" aria-label="Permalink to &quot;NOOP 空函数&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> NOOP</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用场景: 方便判断, 方便压缩</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> instance</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  render</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">NOOP</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">render</span><span style="color:#56B6C2;"> !==</span><span style="color:#E5C07B;"> NOOP</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  instance</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="ison-函数" tabindex="-1">isOn 函数 <a class="header-anchor" href="#ison-函数" aria-label="Permalink to &quot;isOn 函数&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> onRE</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">on</span><span style="color:#D19A66;">[</span><span style="color:#ABB2BF;">^</span><span style="color:#D19A66;">a-z]</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> isOn</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> onRE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">isOn</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;onChange&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#61AFEF;">isOn</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;onClick&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#61AFEF;">isOn</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;change&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="ismodelistener-函数" tabindex="-1">isModeListener 函数 <a class="header-anchor" href="#ismodelistener-函数" aria-label="Permalink to &quot;isModeListener 函数&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> isModelListener</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> key</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;onUpdate:&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// startsWith 是es6提供的方法, 可以用来判断字符串是否以某个字符串开头</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="extend-合并对象" tabindex="-1">extend 合并对象 <a class="header-anchor" href="#extend-合并对象" aria-label="Permalink to &quot;extend 合并对象&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> extend</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">assign</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 举例</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Object.assign(target, ...sources)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// target: 要合并的目标对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// sources: 要合并的源对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回值: 返回合并后的对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果合并的有相同的属性, 则后面的属性会覆盖前面的属性</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> extend</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="remove-函数" tabindex="-1">remove 函数 <a class="header-anchor" href="#remove-函数" aria-label="Permalink to &quot;remove 函数&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> remove</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 不推荐使用, splice很消耗性能, 推荐使用链表</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="hasown-是否为自己本身拥有的属性" tabindex="-1">hasOwn 是否为自己本身拥有的属性 <a class="header-anchor" href="#hasown-是否为自己本身拥有的属性" aria-label="Permalink to &quot;hasOwn 是否为自己本身拥有的属性&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// hasOwnProperty() 指示对象自身属性中是否具有指定的属性</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Object.hasOwn() 旨在替代 hasOwnProperty() 方法, 此方法不检查原型链中的属性</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> hasOwnProperty</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hasOwnProperty</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> hasOwn</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> hasOwnProperty</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> object1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  props</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;exists&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">object1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;prop&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">Obejct</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">object1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;hasOwnProperty&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="isarray-判断数组" tabindex="-1">isArray 判断数组 <a class="header-anchor" href="#isarray-判断数组" aria-label="Permalink to &quot;isArray 判断数组&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> isArray</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isArray</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">([]); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fakeArr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fakeArr</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#E06C75;">fakeArr</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 所以 instanceof 这种情况 不准确</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="ismap-函数" tabindex="-1">isMap 函数 <a class="header-anchor" href="#ismap-函数" aria-label="Permalink to &quot;isMap 函数&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> objectToString</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">toString</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> toTypeString</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> objectToString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> isMap</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> toTypeString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;[object Map]&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 举例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> map</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> val</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> val</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &#39;hello&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">isMap</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">map</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="isset-函数" tabindex="-1">isSet 函数 <a class="header-anchor" href="#isset-函数" aria-label="Permalink to &quot;isSet 函数&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> objectToString</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">toString</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> toTypeString</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> objectToString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> isSet</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> toTypeString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;[object Set]&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 举例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> set</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">set</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">set</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#61AFEF;">isSet</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">set</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="isfunction-函数" tabindex="-1">isFunction 函数 <a class="header-anchor" href="#isfunction-函数" aria-label="Permalink to &quot;isFunction 函数&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> isFunction</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> val</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 举例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">isFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="isobject-函数" tabindex="-1">isObject 函数 <a class="header-anchor" href="#isobject-函数" aria-label="Permalink to &quot;isObject 函数&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> isObject</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> val</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> val</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="isplainobject-函数" tabindex="-1">isPlainObject 函数 <a class="header-anchor" href="#isplainobject-函数" aria-label="Permalink to &quot;isPlainObject 函数&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> objectToString</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">toString</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> toTypeString</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> objectToString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> isPlainObject</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> toTypeString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;[object Object]&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">isPlainObject</span><span style="color:#ABB2BF;">([]); </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#61AFEF;">isPlainObject</span><span style="color:#ABB2BF;">({}); </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="cachestringfunction-缓存函数" tabindex="-1">cacheStringFunction 缓存函数 <a class="header-anchor" href="#cachestringfunction-缓存函数" aria-label="Permalink to &quot;cacheStringFunction 缓存函数&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> cacheStringFunction</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> cache</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="首字母大写" tabindex="-1">首字母大写 <a class="header-anchor" href="#首字母大写" aria-label="Permalink to &quot;首字母大写&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> capitalize</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> cacheStringFunction</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  (</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toUpperCase</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 举例</span></span>
<span class="line"><span style="color:#61AFEF;">capitalize</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Hello</span></span>
<span class="line"><span style="color:#61AFEF;">capitalize</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;change&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Change</span></span>
<span class="line"><span style="color:#61AFEF;">capitalize</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Click</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="click-onclick" tabindex="-1">click -&gt; onClick <a class="header-anchor" href="#click-onclick" aria-label="Permalink to &quot;click -&gt; onClick&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> toHandlerKey</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> cacheStringFunction</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#E06C75;">  str</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> \`on</span><span style="color:#C678DD;">\${</span><span style="color:#61AFEF;">capitalize</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> \`\`</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">toHandlerKey</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// onClick</span></span>
<span class="line"><span style="color:#61AFEF;">toHandlerKey</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;change&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// onChange</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="haschanged-判断是不是有变化" tabindex="-1">hasChanged(判断是不是有变化) <a class="header-anchor" href="#haschanged-判断是不是有变化" aria-label="Permalink to &quot;hasChanged(判断是不是有变化)&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> hasChanged</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldValue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 举例</span></span>
<span class="line"><span style="color:#61AFEF;">hasChanged</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Object.is() 方法判断两个值是否为同一个值，如果满足以下任意条件则两个值相等：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 都是 undefined</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 都是 null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 都是 true 或都是 false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 都是相同长度、相同字符、按相同顺序排列的字符串</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 都是相同对象（意味着都是同一个对象的值引用）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 都是数字且</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 都是 +0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 都是 -0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 都是 NaN</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 都是同一个值，非零且都不是 NaN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="invokearrayfns-执行数组里的函数" tabindex="-1">invokeArrayFns 执行数组里的函数 <a class="header-anchor" href="#invokearrayfns-执行数组里的函数" aria-label="Permalink to &quot;invokeArrayFns 执行数组里的函数&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fns</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">), () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;world&quot;</span><span style="color:#ABB2BF;">)];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> invokeArrayFns</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fns</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> fns</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    fns</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">arg</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// invokeArrayFns(fns, &#39;1&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,38)),o(a,{"post-key":"invokeArrayFns"}),s[1]||(s[1]=n(`<h4 id="ispromise-函数" tabindex="-1">isPromise 函数 <a class="header-anchor" href="#ispromise-函数" aria-label="Permalink to &quot;isPromise 函数&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> isPromise</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#61AFEF;"> isObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> isFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">val</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">then</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> isFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">val</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">catch</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 举例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> promise</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;DZL&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#61AFEF;">isPromise</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">promise</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="传送门" tabindex="-1">传送门 <a class="header-anchor" href="#传送门" aria-label="Permalink to &quot;传送门&quot;">​</a></h3><p><a href="https://juejin.cn/post/6844903487155732494" target="_blank" rel="noreferrer">正则学习</a><br><a href="https://link.juejin.cn/?target=https%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Fstring-methods" target="_blank" rel="noreferrer">es6 入门教程</a><br><a href="http://liubin.org/promises-book/" target="_blank" rel="noreferrer">Promise</a></p>`,4))])}const A=l(r,[["render",c]]);export{C as __pageData,A as default};
